# ================================
# 最小化生产环境配置文件
# ================================
# 这是最小化配置，足够系统启动和运行
# 如需完整功能（AI、翻译等），请参考 .env.prod.example

# ================================
# 数据库配置（必须）
# ================================
# MySQL Root 密码
MYSQL_ROOT_PASSWORD=CertMonitor@2024!Strong

# MySQL 数据库信息
MYSQL_DATABASE=common_db
MYSQL_USER=cert_user
MYSQL_PASSWORD=CertUser@2024!Strong

# ================================
# Redis 配置（推荐）
# ================================
REDIS_PASSWORD=Redis@2024!Strong

# ================================
# Druid 监控配置（推荐）
# ================================
DRUID_USERNAME=admin
DRUID_PASSWORD=DruidAdmin@2024!Strong

# ================================
# CORS 跨域配置（重要）
# ================================
# 请将 your-server-ip 替换为实际服务器IP或域名
CORS_ALLOWED_ORIGINS=http://localhost,http://127.0.0.1,http://your-server-ip

# ================================
# 应用配置
# ================================
APP_ENV=production
SWAGGER_ENABLED=false

# ================================
# 说明
# ================================
# 1. 使用此配置可以启动完整系统（前端+后端+数据库）
# 2. 数据库会自动初始化所有表（通过 /database/init_database_full.sql）
# 3. 不包含 AI 和翻译功能，如需使用请添加：
#    - OPENAI_API_KEY=your_key
#    - VOLCENGINE_ACCESS_KEY=your_key
#    - VOLCENGINE_SECRET_KEY=your_key
# 4. 邮件和 Slack 通知默认关闭
# 5. 所有密码都是示例，生产环境请修改为更强的密码！

# ================================
# 部署步骤
# ================================
# 1. 复制此文件为 .env.prod
#    cp .env.prod.minimal .env.prod
#
# 2. 修改密码和 CORS_ALLOWED_ORIGINS
#    vim .env.prod
#
# 3. 构建并启动所有服务
#    podman-compose -f docker-compose.prod.yml up -d --build
#
# 4. 查看日志
#    podman-compose logs -f
#
# 5. 访问系统
#    前端: http://your-server-ip
#    后端: http://your-server-ip:8080/api
#    数据库管理: http://your-server-ip:8081
